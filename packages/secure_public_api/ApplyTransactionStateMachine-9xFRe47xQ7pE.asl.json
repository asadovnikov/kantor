{
  "Comment": "Apply transaction workflow",
  "StartAt": "ApplyTransaction",
  "States": {
    "ApplyTransaction": {
      "Comment": "A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-1:293562257411:function:staging-transaction-api-ApplyTransactionFunction-86V8DL474OX4",
        "Payload": {
          "Input.$": "$"
        }
      },
      "Next": "ResolveCustomer",
      "Catch": [
        {
          "ErrorEquals": [
            "InvalidTransactionError"
          ],
          "Next": "TransactionErrorHandler"
        }
      ],
      "Retry": [
        {
          "ErrorEquals": [
            "InvalidTransactionError"
          ],
          "MaxAttempts": 0
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 1.5
        }
      ]
    },
    "ResolveCustomer": {
      "Comment": "A Choice state adds branching logic to a state machine. Choice rules can implement 16 different comparison operators, and can be combined using And, Or, and Not",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.registeredTransaction.customer.resolved",
          "BooleanEquals": true,
          "Next": "GetLimits"
        },
        {
          "Variable": "$.registeredTransaction.customer.resolved",
          "BooleanEquals": false,
          "Next": "RegisterCustomer"
        }
      ],
      "Default": "TransactionErrorHandler"
    },
    "RegisterCustomer": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-1:293562257411:function:staging-transaction-api-RegisterCustomerFunction-10PNUZWXVEA5V",
        "Payload": {
          "Input.$": "$.registeredTransaction"
        }
      },
      "Next": "GetLimits",
      "Catch": [
        {
          "ErrorEquals": [
            "InvalidTransactionError"
          ],
          "Next": "TransactionErrorHandler"
        }
      ],
      "Retry": [
        {
          "ErrorEquals": [
            "InvalidTransactionError"
          ],
          "MaxAttempts": 0
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 1.5
        }
      ]
    },
    "GetLimits": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-1:293562257411:function:staging-transaction-api-GetLimitsFunction-H5Y956JJO1YJ",
        "Payload": {
          "Input.$": "$.registeredTransaction"
        }
      },
      "Next": "UpdateCustomerLimits",
      "Catch": [
        {
          "ErrorEquals": [
            "InvalidTransactionError"
          ],
          "Next": "TransactionErrorHandler"
        }
      ],
      "Retry": [
        {
          "ErrorEquals": [
            "InvalidTransactionError"
          ],
          "MaxAttempts": 0
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 1.5
        }
      ]
    },
    "TransactionErrorHandler": {
      "Type": "Fail",
      "Cause": "Invalid data provided!",
      "Error": "InvalidDataException"
    },
    "UpdateCustomerLimits": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-1:293562257411:function:staging-transaction-api-UpdateCustomerLimitsFuncti-1NZ1EATHDLDIH",
        "Payload": {
          "Input.$": "$.registeredTransaction"
        }
      },
      "Catch": [
        {
          "ErrorEquals": [
            "InvalidTransactionError"
          ],
          "Next": "TransactionErrorHandler"
        }
      ],
      "Retry": [
        {
          "ErrorEquals": [
            "InvalidTransactionError"
          ],
          "MaxAttempts": 0
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 1.5
        }
      ],
      "End": true
    }
  }
}