AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  packages

  Sample SAM Template for packages

Globals:
  Function:
    Timeout: 3
    Tracing: Active
Resources:
  StagingCommittedTransactionsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: tr_id
          AttributeType: S
      KeySchema:
        - AttributeName: tr_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: StagingCommittedTransactions
  StagingLimitsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
      - AttributeName: Tier
        AttributeType: S
      KeySchema:
        - AttributeName: Tier
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: StagingLimits
  StagingCustomersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: cst_id
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: cst_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
      - IndexName: Email-Firstname-Surname-PostalCode-index
        KeySchema:
        - AttributeName: Email
          KeyType: HASH
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '3'
          WriteCapacityUnits: '3'
      TableName: StagingCustomers
  ValidateTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: transaction/validate
      Handler: index.handler
      Runtime: nodejs12.x
      Events:
        ValidateTransactionApi:
          Type: Api
          Properties:
            Path: /transaction/validate
            Method: post
  RegisterTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: transaction/register
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          TRANSACTION_TABLE_NAME: !Ref StagingCommittedTransactionsTable
          CUSTOMERS_TABLE_NAME: !Ref StagingCustomersTable
          WARNING_TOPIC_ARN: !Ref WarningSNSTopic
          TIER_UP_TOPIC_ARN: !Ref TierUpSNSTopic
          ERROR_TOPIC_ARN: !Ref ErrorSNSTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StagingCommittedTransactionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref StagingCustomersTable
        - SNSCrudPolicy:
            TopicName: !GetAtt TransactionRegisteredSNSTopic.TopicName
        - SNSCrudPolicy:
            TopicName: !GetAtt ErrorSNSTopic.TopicName
        - SNSCrudPolicy:
            TopicName: !GetAtt WarningSNSTopic.TopicName
        - SNSCrudPolicy:
            TopicName: !GetAtt TierUpSNSTopic.TopicName
      Events:
        RegisterTransactionApi:
          Type: Api
          Properties:
            Path: /transaction/register
            Method: post
  RegisterCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer/register
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref StagingCustomersTable
          TOPIC_ARN: !Ref TransactionRegisteredSNSTopic
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref StagingCustomersTable
        - SNSCrudPolicy:
            TopicName: !GetAtt TransactionRegisteredSNSTopic.TopicName
  ResolveCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer/resolve
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref StagingCustomersTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref StagingCustomersTable
  UpdateCustomerLimitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer/updateLimits
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref StagingCustomersTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref StagingCustomersTable
  GetLimitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: limits/get
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref StagingLimitsTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref StagingLimitsTable
  TransactionErrorHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: transaction/errorHandler
      Handler: index.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref StagingCommittedTransactionsTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref StagingCommittedTransactionsTable
  ApplyTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: transaction/apply
      Handler: index.handler
      Runtime: nodejs12.x
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /RegisteredTransactionApply/
      Policies:
      - PolicyName: InvokeLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: InvokeLambda
            Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
  ApplyTransactionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub: "{\r\n  \"Comment\": \"Apply transaction workflow\",\r\n  \"StartAt\": \"ApplyTransaction\",\r\n  \"States\": {\r\n    \"ApplyTransaction\": {\r\n      \"Comment\": \"A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.\",\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\r\n      \"Parameters\": {\r\n        \"FunctionName\": \"${ApplyTransactionFunction.Arn}\",\r\n        \"Payload\": {\r\n          \"Input.$\": \"$\"\r\n        }\r\n      },\r\n      \"Next\": \"ResolveCustomer\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"InvalidTransactionError\"\r\n          ],\r\n          \"Next\": \"TransactionErrorHandler\"\r\n        }\r\n      ],\r\n      \"Retry\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"InvalidTransactionError\"\r\n          ],\r\n          \"MaxAttempts\": 0\r\n        },\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"IntervalSeconds\": 1,\r\n          \"MaxAttempts\": 3,\r\n          \"BackoffRate\": 1.5\r\n        }\r\n      ]\r\n    },\r\n    \"ResolveCustomer\": {\r\n      \"Comment\": \"A Choice state adds branching logic to a state machine. Choice rules can implement 16 different comparison operators, and can be combined using And, Or, and Not\",\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.registeredTransaction.customer.resolved\",\r\n          \"BooleanEquals\": true,\r\n          \"Next\": \"GetLimits\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.registeredTransaction.customer.resolved\",\r\n          \"BooleanEquals\": false,\r\n          \"Next\": \"RegisterCustomer\"\r\n        }\r\n      ],\r\n      \"Default\": \"TransactionErrorHandler\"\r\n    },\r\n    \"RegisterCustomer\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\r\n      \"Parameters\": {\r\n        \"FunctionName\": \"${RegisterCustomerFunction.Arn}\",\r\n        \"Payload\": {\r\n          \"Input.$\": \"$.registeredTransaction\"\r\n        }\r\n      },\r\n      \"Next\": \"GetLimits\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"InvalidTransactionError\"\r\n          ],\r\n          \"Next\": \"TransactionErrorHandler\"\r\n        }\r\n      ],\r\n      \"Retry\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"InvalidTransactionError\"\r\n          ],\r\n          \"MaxAttempts\": 0\r\n        },\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"IntervalSeconds\": 1,\r\n          \"MaxAttempts\": 3,\r\n          \"BackoffRate\": 1.5\r\n        }\r\n      ]\r\n    },\r\n    \"GetLimits\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\r\n      \"Parameters\": {\r\n        \"FunctionName\": \"${GetLimitsFunction.Arn}\",\r\n        \"Payload\": {\r\n          \"Input.$\": \"$.registeredTransaction\"\r\n        }\r\n      },\r\n      \"Next\": \"UpdateCustomerLimits\",\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"InvalidTransactionError\"\r\n          ],\r\n          \"Next\": \"TransactionErrorHandler\"\r\n        }\r\n      ],\r\n      \"Retry\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"InvalidTransactionError\"\r\n          ],\r\n          \"MaxAttempts\": 0\r\n        },\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"IntervalSeconds\": 1,\r\n          \"MaxAttempts\": 3,\r\n          \"BackoffRate\": 1.5\r\n        }\r\n      ]\r\n    },\r\n    \"TransactionErrorHandler\": {\r\n      \"Type\": \"Fail\",\r\n      \"Cause\": \"Invalid data provided!\",\r\n      \"Error\": \"InvalidDataException\"\r\n    },\r\n    \"UpdateCustomerLimits\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\r\n      \"Parameters\": {\r\n        \"FunctionName\": \"${UpdateCustomerLimitsFunction.Arn}\",\r\n        \"Payload\": {\r\n          \"Input.$\": \"$.registeredTransaction\"\r\n        }\r\n      },\r\n      \"Catch\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"InvalidTransactionError\"\r\n          ],\r\n          \"Next\": \"TransactionErrorHandler\"\r\n        }\r\n      ],\r\n      \"Retry\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"InvalidTransactionError\"\r\n          ],\r\n          \"MaxAttempts\": 0\r\n        },\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"States.ALL\"\r\n          ],\r\n          \"IntervalSeconds\": 1,\r\n          \"MaxAttempts\": 3,\r\n          \"BackoffRate\": 1.5\r\n        }\r\n      ],\r\n      \"End\": true\r\n    }\r\n  }\r\n}"
      RoleArn:
        Fn::GetAtt:
        - StateMachineRole
        - Arn
  TransactionRegisteredSNSTopic:
    Type: AWS::SNS::Topic
  WarningSNSTopic:
    Type: AWS::SNS::Topic
  ErrorSNSTopic:
    Type: AWS::SNS::Topic
  TierUpSNSTopic:
    Type: AWS::SNS::Topic
Outputs:
  TierUpSNSTopic: 
    Description: 'Notification topic to signal that customer tier was leveled up'
    Value: !Ref TierUpSNSTopic
  ErrorSNSTopic:
    Description: 'Notification topic to signal error'
    Value: !Ref ErrorSNSTopic
  WarningSNSTopic:
    Description: 'Notification topic to warn about strange activity'
    Value: !Ref WarningSNSTopic
  TransactionRegisteredSNSTopic:
    Description: 'Notification topic to start applying of a transaction'
    Value: !Ref TransactionRegisteredSNSTopic
  ValidateTransactionApi:
    Description: 'API Gateway endpoint URL for Prod stage for Validate Transaction function'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/transaction/validate/'
  ValidateTransactionFunction:
    Description: 'Validate Transaction Lambda Function ARN'
    Value: !GetAtt ValidateTransactionFunction.Arn
  ValidateTransactionFunctionIamRole:
    Description: 'Implicit IAM Role created for Validate Transaction function'
    Value: !GetAtt ValidateTransactionFunctionRole.Arn
  RegisterTransactionApi:
    Description: 'API Gateway endpoint URL for Prod stage for Register Transaction function'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/transaction/register/'
  RegisterTransactionFunction:
    Description: 'Register Transaction Lambda Function ARN'
    Value: !GetAtt RegisterTransactionFunction.Arn
  RegisterTransactionFunctionIamRole:
    Description: 'Implicit IAM Role created for Register Transaction function'
    Value: !GetAtt RegisterTransactionFunctionRole.Arn
  ApplyTransactionFunction:
    Description: 'Apply Transaction Lambda Function ARN'
    Value: !GetAtt ApplyTransactionFunction.Arn
  ApplyTransactionFunctionIamRole:
    Description: 'Implicit IAM Role created for Apply Transaction function'
    Value: !GetAtt ApplyTransactionFunctionRole.Arn
  RegisterCustomerFunction:
    Description: 'Register Customer Lambda Function ARN'
    Value: !GetAtt RegisterCustomerFunction.Arn
  RegisterCustomerFunctionIamRole:
    Description: 'Implicit IAM Role created for Register Customer function'
    Value: !GetAtt RegisterCustomerFunctionRole.Arn
  TransactionErrorHandlerFunction:
    Description: 'Transaction error handler Lambda Function ARN'
    Value: !GetAtt TransactionErrorHandlerFunction.Arn
  TransactionErrorHandlerFunctionIamRole:
    Description: 'Implicit IAM Role created for Transaction Error handler function'
    Value: !GetAtt TransactionErrorHandlerFunctionRole.Arn
  GetLimitsFunction:
    Description: 'Get Limits Lambda Function ARN'
    Value: !GetAtt GetLimitsFunction.Arn
  GetLimitsFunctionIamRole:
    Description: 'Implicit IAM Role created for Get Limits function'
    Value: !GetAtt GetLimitsFunctionRole.Arn
  ResolveCustomerFunction:
    Description: 'Resolve Customer Lambda Function ARN'
    Value: !GetAtt ResolveCustomerFunction.Arn
  ResolveCustomerFunctionIamRole:
    Description: 'Implicit IAM Role created for Resolve Customer function'
    Value: !GetAtt ResolveCustomerFunctionRole.Arn
  UpdateCustomerLimitsFunction:
    Description: 'Update Customer limits Lambda Function ARN'
    Value: !GetAtt UpdateCustomerLimitsFunction.Arn
  UpdateCustomerLimitsFunctionIamRole:
    Description: 'Implicit IAM Role created for Update Customer limits function'
    Value: !GetAtt UpdateCustomerLimitsFunctionRole.Arn
  StagingCommittedTransactionsTable:
    Value: !GetAtt StagingCommittedTransactionsTable.Arn
    Description: The ARN of StagingCommittedTransactions DynamoDB Table
  StagingCustomersTable:
    Value: !GetAtt StagingCustomersTable.Arn
    Description: The ARN of StagingCustomers DynamoDB Table
  StagingLimitsTable:
    Value: !GetAtt StagingLimitsTable.Arn
    Description: The ARN of StagingLimits DynamoDB Table