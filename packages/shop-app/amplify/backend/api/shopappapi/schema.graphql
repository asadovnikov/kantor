enum EmploymentStatus {
	STUDENT
	EMPLOYED
	SELFEMPLOYED
	RETIRED
}

enum SourceOfFunds {
	SALARY
	DIVIDENDS
	INHERITANCE
	SAVINGS
	GIFT
	OTHER
}

enum JumioVerifyStatus {
	PENDING
	VERIFIED
}

enum Occupation {
	CONSTRUCTIONREALESTATE
	EDUCATION
	EMERGENCYSERVICE
	FINANCIALSERVICEBANKING
	FINANCIALSERVICEINSURANCE
}

enum AnnualDeposit {
	UP10K
	FROM10KTO50K
	FROM50KTO150K
	FROM150KTO500K
	MORE500K
}

enum PaymentRequestStatus {
	RECEIVED
	APPROVED
	DECLINED
	COMMITED
}

enum DocumentState {
	NEW
	VERIFIED
	FAILED
	JUMIO_VERIFIED
}

enum DocumentClassification {
	UNKNOWN
	IDENTITY
	POA
	SOW
	PHOTO
	DOCUMENT
}

enum KYCStageStatus {
	INITIATED
	VALIDATED
	NOT_REQUIRED
	FAILED
}

enum CustomerTier {
	INITIAL
	LOW
	UPPER
	HIGH
}

enum CustomerState {
	ACTIVE
	BLOCKED
}

type S3Object {
	bucket: String!
	region: String!
	key: String!
}

type KYCDocument
	@aws_api_key
	@aws_iam
	@model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
	@auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admins"] }, { allow: public, provider: apiKey }])
	@key(name: "byDocumentVerification", fields: ["verificationID", "documentType", "s3Key", "state"]) {
	id: ID!
	name: String
	state: DocumentState!
	file: S3Object
	s3Key: String!
	documentType: DocumentClassification!
	verificationID: ID!
}

type PaymentRequest
	@model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
	@auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admins"] }]) {
	id: ID!
	Firstname: String!
	Surname: String!
	DateOfBirth: String
	StreetLine1: String!
	StreetLine2: String
	City: String!
	PostalCode: String!
	StateProvince: String!
	Country: String!
	Email: String!
	Telephone: String
	FiatCurrency: String!
	FiatAmount: String!
	Status: PaymentRequestStatus!
}

type Transaction
	@model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
	@key(name: "byMerchantRef", fields: ["MerchantRef", "id"])
	@auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admins"] }])
	@key(
		name: "byCustomerTransaction"
		fields: ["customerID", "FiatCurrency", "FiatAmount", "CryptoCurrency", "CryptoAmount", "CryptoAddress"]
	) {
	id: ID!
	Firstname: String!
	Surname: String!
	DateOfBirth: String
	StreetLine1: String!
	StreetLine2: String
	City: String!
	PostalCode: String!
	StateProvince: String!
	Country: String!
	Email: String!
	Telephone: String
	FiatCurrency: String!
	FiatBaseAmount: String
	FiatAmount: String!
	CryptoCurrency: String!
	CryptoAmount: String!
	CryptoAddress: String!
	GWReference: String
	BankReference: String
	MerchantRef: ID!
	customerID: ID!
}

type Customer
	@aws_api_key
	@aws_iam
	@model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
	@auth(
		rules: [
			{ allow: owner }
			{ allow: groups, groups: ["Admins"] }
			{ allow: public, provider: apiKey }
			{ allow: groups, groups: ["Customers"], operations: [read] }
		]
	)
	@searchable {
	id: ID!
	Firstname: String!
	Surname: String!
	DateOfBirth: String
	StreetLine1: String!
	StreetLine2: String
	City: String!
	PostalCode: Int!
	StateProvince: String!
	Country: String!
	Email: String!
	Telephone: String
	FiatTotalAmount: String
	FiatDailyAmount: String
	FiatMonthlyAmount: String
	FiatCurrency: String
	Tier: CustomerTier!
	KYCState: KYCStageStatus!
	VerificationID: ID!
	PaymentTransactions: [Transaction] @connection(keyName: "byCustomerTransaction", fields: ["id"])
	kycVerificationID: ID!
	KYCVerification: Verification @connection(fields: ["kycVerificationID"])
	comments: [Comment] @connection(keyName: "byCustomerComment", fields: ["id"])
	EmploymentStatus: EmploymentStatus
	SourceOfFunds: SourceOfFunds
	Occupation: Occupation
	AnnualDeposit: AnnualDeposit
	State: CustomerState!
}

type JumioVerifyMetaData
	@model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
	@auth(rules: [{ allow: groups, groups: ["Admins"] }, { allow: public, provider: apiKey }])
	@key(name: "byJumioVerification", fields: ["verificationID"]) {
	id: ID!
	dataInput: String!
	verificationID: ID!
	inputType: String!
	metaInfo: String!
	verification: Verification @connection(fields: ["verificationID"])
	JumioVerifyStatus: JumioVerifyStatus!
}

type Comment
	@model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
	@auth(rules: [{ allow: groups, groups: ["Admins"] }, { allow: public, provider: apiKey }])
	@key(name: "byCustomerComment", fields: ["customerID", "content", "AuthorEmail"]) {
	id: ID!
	content: String!
	customerID: ID!
	Author: String
	AuthorEmail: String!
}

type Verification
	@aws_api_key
	@aws_iam
	@model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
	@auth(
		rules: [
			{ allow: owner }
			{ allow: groups, groups: ["Admins"] }
			{ allow: public, provider: apiKey }
			{ allow: groups, groups: ["Customers"], operations: [read] }
		]
	) {
	id: ID!
	idVerification: KYCStageStatus!
	poaVerification: KYCStageStatus!
	financeVerification: KYCStageStatus!
	customerID: ID!
	customer: Customer @connection(fields: ["customerID"])
	documents: [KYCDocument] @connection(keyName: "byDocumentVerification", fields: ["id"])
	jumioVerifications: [JumioVerifyMetaData] @connection(keyName: "byJumioVerification", fields: ["id"])
}

type UserMeata
	@model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
	@auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admins"] }]) {
	id: ID!
	email: String!
}

type UserWallets
	@model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
	@auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admins"] }]) {
	id: ID!
	name: String!
	Address: String!
	description: String
	State: UserWalletState
}

type TemporaryLinks
	@aws_api_key
	@aws_iam
	@model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
	@auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admins"] }, { allow: public, provider: apiKey }]) {
	id: ID!
	customerId: ID!
	transactionId: ID!
	link: String!
	comment: String
}

enum UserWalletState {
	ACTIVE
	INACTIVE
}
